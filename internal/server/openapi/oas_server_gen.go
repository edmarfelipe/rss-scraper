// Code generated by ogen, DO NOT EDIT.

package openapi

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// FeedsFollowFeedFallowIDDelete implements DELETE /feeds/follow/{feed_fallow_id} operation.
	//
	// Unfollow feed.
	//
	// DELETE /feeds/follow/{feed_fallow_id}
	FeedsFollowFeedFallowIDDelete(ctx context.Context, params FeedsFollowFeedFallowIDDeleteParams) (FeedsFollowFeedFallowIDDeleteRes, error)
	// FeedsFollowGet implements GET /feeds/follow operation.
	//
	// Get feeds to follow.
	//
	// GET /feeds/follow
	FeedsFollowGet(ctx context.Context) (FeedsFollowGetRes, error)
	// FeedsFollowPost implements POST /feeds/follow operation.
	//
	// Follow feed.
	//
	// POST /feeds/follow
	FeedsFollowPost(ctx context.Context, req *FeedsFollowPostReq) (FeedsFollowPostRes, error)
	// FeedsGet implements GET /feeds operation.
	//
	// Get feeds.
	//
	// GET /feeds
	FeedsGet(ctx context.Context) (FeedsGetRes, error)
	// FeedsPost implements POST /feeds operation.
	//
	// Create feed.
	//
	// POST /feeds
	FeedsPost(ctx context.Context, req *FeedsPostReq) (FeedsPostRes, error)
	// PostsGet implements GET /posts operation.
	//
	// Get posts by User.
	//
	// GET /posts
	PostsGet(ctx context.Context, params PostsGetParams) (PostsGetRes, error)
	// UsersGet implements GET /users operation.
	//
	// Get user By API Key.
	//
	// GET /users
	UsersGet(ctx context.Context) (UsersGetRes, error)
	// UsersPost implements POST /users operation.
	//
	// Create user.
	//
	// POST /users
	UsersPost(ctx context.Context, req *UsersPostReq) (UsersPostRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
